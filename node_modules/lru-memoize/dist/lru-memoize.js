(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["LruMemoize"] = factory();
	else
		root["LruMemoize"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = memoize;

var _deepEquals = __webpack_require__(1);

var _deepEquals2 = _interopRequireDefault(_deepEquals);

var _lruCache = __webpack_require__(3);

var _lruCache2 = _interopRequireDefault(_lruCache);

var _singletonCache = __webpack_require__(4);

var _singletonCache2 = _interopRequireDefault(_singletonCache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createCache(limit, equals) {
  return limit === 1 ? (0, _singletonCache2.default)(equals) : (0, _lruCache2.default)(limit, equals);
}

function createEqualsFn(basicEquals, deepObjects) {
  // Choose strategy for basic or deep object equals
  var equals = deepObjects ? (0, _deepEquals2.default)(basicEquals, deepObjects) : basicEquals;

  return function (valueA, valueB) {
    // The arguments are always the argument array-like objects

    // Different lengths means they are not the same
    if (valueA.length !== valueB.length) {
      return false;
    }

    // Compare the values
    for (var index = 0; index < valueA.length; index += 1) {
      if (!equals(valueA[index], valueB[index])) {
        return false;
      }
    }
    // Found no conflicts
    return true;
  };
}

function memoize() {
  var limit = 1;
  var equals = function equals(valueA, valueB) {
    return valueA === valueB;
  };
  var deepObjects = false;

  for (var _len = arguments.length, config = Array(_len), _key = 0; _key < _len; _key++) {
    config[_key] = arguments[_key];
  }

  if (typeof config[0] === 'number') {
    limit = config.shift();
  }
  if (typeof config[0] === 'function') {
    equals = config.shift();
  } else if (typeof config[0] === 'undefined') {
    // Support passing undefined equal argument;
    config.shift();
  }
  if (typeof config[0] === 'boolean') {
    deepObjects = config[0];
  }

  var cache = createCache(limit, createEqualsFn(equals, deepObjects));

  return function (fn) {
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var value = cache.get(args);
      if (value === undefined) {
        value = fn.apply(fn, args);
        cache.put(args, value);
      }
      return value;
    };
  };
}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = deepEquals;
var hasOwn = function hasOwn(object, key) {
  return Object.prototype.hasOwnProperty.call(object, key);
};
function deepEquals(equals, deepObjects) {
  function deep(valueA, valueB) {
    if (equals(valueA, valueB)) {
      return true;
    }

    if (Array.isArray(valueA)) {
      if (!Array.isArray(valueB) || valueA.length !== valueB.length) {
        return false;
      }

      // Check deep equality of each value in A against the same indexed value in B
      if (!valueA.every(function (value, index) {
        return deep(value, valueB[index]);
      })) {
        return false;
      }

      // could not find unequal items
      return true;
    }

    if (Array.isArray(valueB)) {
      return false;
    }

    if ((typeof valueA === 'undefined' ? 'undefined' : _typeof(valueA)) === 'object') {
      if ((typeof valueB === 'undefined' ? 'undefined' : _typeof(valueB)) !== 'object') {
        return false;
      }

      var isANull = valueA === null;
      var isBNull = valueB === null;
      if (isANull || isBNull) {
        return isANull === isBNull;
      }

      var aKeys = Object.keys(valueA);
      var bKeys = Object.keys(valueB);

      if (aKeys.length !== bKeys.length) {
        return false;
      }

      // Should we compare with shallow equivalence or deep equivalence?
      var equalityChecker = deepObjects ? deep : equals;

      // Check if objects share same keys, and each of those keys are equal
      if (!aKeys.every(function (aKey) {
        return hasOwn(valueA, aKey) && hasOwn(valueB, aKey) && equalityChecker(valueA[aKey], valueB[aKey]);
      })) {
        return false;
      }

      // could not find unequal keys or values
      return true;
    }
    return false;
  }

  return deep;
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _memoize = __webpack_require__(0);

var _memoize2 = _interopRequireDefault(_memoize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _memoize2.default;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = lruCache;
function lruCache(limit, equals) {
  var entries = [];

  function get(key) {
    var cacheIndex = entries.findIndex(function (entry) {
      return equals(key, entry.key);
    });

    // We found a cached entry
    if (cacheIndex > -1) {
      var entry = entries[cacheIndex];

      // Cached entry not at top of cache, move it to the top
      if (cacheIndex > 0) {
        entries.slice(cacheIndex, 1);
        entries.unshift(entry);
      }

      return entry.value;
    }

    // No entry found in cache, return null
    return undefined;
  }

  function put(key, value) {
    if (!get(key)) {
      entries.unshift({ key: key, value: value });
      if (entries.length > limit) {
        entries.pop();
      }
    }
  }

  return { get: get, put: put };
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = singletonCache;
function singletonCache(equals) {
  var entry = void 0;
  return {
    get: function get(key) {
      if (entry && equals(key, entry.key)) {
        return entry.value;
      }
    },
    put: function put(key, value) {
      entry = { key: key, value: value };
    }
  };
}

/***/ })
/******/ ]);
});