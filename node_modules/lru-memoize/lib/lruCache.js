"use strict";

exports.__esModule = true;
exports.default = lruCache;
function lruCache(limit, equals) {
  var entries = [];

  function get(key) {
    var cacheIndex = entries.findIndex(function (entry) {
      return equals(key, entry.key);
    });

    // We found a cached entry
    if (cacheIndex > -1) {
      var entry = entries[cacheIndex];

      // Cached entry not at top of cache, move it to the top
      if (cacheIndex > 0) {
        entries.slice(cacheIndex, 1);
        entries.unshift(entry);
      }

      return entry.value;
    }

    // No entry found in cache, return null
    return undefined;
  }

  function put(key, value) {
    if (!get(key)) {
      entries.unshift({ key: key, value: value });
      if (entries.length > limit) {
        entries.pop();
      }
    }
  }

  return { get: get, put: put };
}