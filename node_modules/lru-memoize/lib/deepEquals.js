'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = deepEquals;
var hasOwn = function hasOwn(object, key) {
  return Object.prototype.hasOwnProperty.call(object, key);
};
function deepEquals(equals, deepObjects) {
  function deep(valueA, valueB) {
    if (equals(valueA, valueB)) {
      return true;
    }

    if (Array.isArray(valueA)) {
      if (!Array.isArray(valueB) || valueA.length !== valueB.length) {
        return false;
      }

      // Check deep equality of each value in A against the same indexed value in B
      if (!valueA.every(function (value, index) {
        return deep(value, valueB[index]);
      })) {
        return false;
      }

      // could not find unequal items
      return true;
    }

    if (Array.isArray(valueB)) {
      return false;
    }

    if ((typeof valueA === 'undefined' ? 'undefined' : _typeof(valueA)) === 'object') {
      if ((typeof valueB === 'undefined' ? 'undefined' : _typeof(valueB)) !== 'object') {
        return false;
      }

      var isANull = valueA === null;
      var isBNull = valueB === null;
      if (isANull || isBNull) {
        return isANull === isBNull;
      }

      var aKeys = Object.keys(valueA);
      var bKeys = Object.keys(valueB);

      if (aKeys.length !== bKeys.length) {
        return false;
      }

      // Should we compare with shallow equivalence or deep equivalence?
      var equalityChecker = deepObjects ? deep : equals;

      // Check if objects share same keys, and each of those keys are equal
      if (!aKeys.every(function (aKey) {
        return hasOwn(valueA, aKey) && hasOwn(valueB, aKey) && equalityChecker(valueA[aKey], valueB[aKey]);
      })) {
        return false;
      }

      // could not find unequal keys or values
      return true;
    }
    return false;
  }

  return deep;
}