'use strict';

exports.__esModule = true;
exports.default = memoize;

var _deepEquals = require('./deepEquals');

var _deepEquals2 = _interopRequireDefault(_deepEquals);

var _lruCache = require('./lruCache');

var _lruCache2 = _interopRequireDefault(_lruCache);

var _singletonCache = require('./singletonCache');

var _singletonCache2 = _interopRequireDefault(_singletonCache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createCache(limit, equals) {
  return limit === 1 ? (0, _singletonCache2.default)(equals) : (0, _lruCache2.default)(limit, equals);
}

function createEqualsFn(basicEquals, deepObjects) {
  // Choose strategy for basic or deep object equals
  var equals = deepObjects ? (0, _deepEquals2.default)(basicEquals, deepObjects) : basicEquals;

  return function (valueA, valueB) {
    // The arguments are always the argument array-like objects

    // Different lengths means they are not the same
    if (valueA.length !== valueB.length) {
      return false;
    }

    // Compare the values
    for (var index = 0; index < valueA.length; index += 1) {
      if (!equals(valueA[index], valueB[index])) {
        return false;
      }
    }
    // Found no conflicts
    return true;
  };
}

function memoize() {
  var limit = 1;
  var equals = function equals(valueA, valueB) {
    return valueA === valueB;
  };
  var deepObjects = false;

  for (var _len = arguments.length, config = Array(_len), _key = 0; _key < _len; _key++) {
    config[_key] = arguments[_key];
  }

  if (typeof config[0] === 'number') {
    limit = config.shift();
  }
  if (typeof config[0] === 'function') {
    equals = config.shift();
  } else if (typeof config[0] === 'undefined') {
    // Support passing undefined equal argument;
    config.shift();
  }
  if (typeof config[0] === 'boolean') {
    deepObjects = config[0];
  }

  var cache = createCache(limit, createEqualsFn(equals, deepObjects));

  return function (fn) {
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var value = cache.get(args);
      if (value === undefined) {
        value = fn.apply(fn, args);
        cache.put(args, value);
      }
      return value;
    };
  };
}