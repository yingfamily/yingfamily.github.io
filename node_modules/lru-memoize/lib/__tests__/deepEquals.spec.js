'use strict';

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _deepEquals = require('../deepEquals');

var _deepEquals2 = _interopRequireDefault(_deepEquals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tripleEquals = (0, _deepEquals2.default)(function (valueA, valueB) {
  return valueA === valueB;
}, true);

describe('deepEquals', function () {
  it('should return true if argument fields are equal', function () {
    (0, _expect2.default)(tripleEquals(3, 3)).toBe(true);

    (0, _expect2.default)(tripleEquals('dog', 'dog')).toBe(true);

    (0, _expect2.default)(tripleEquals({ a: 1, b: 2, c: undefined }, { a: 1, b: 2, c: undefined })).toBe(true);

    (0, _expect2.default)(tripleEquals({ a: 1, b: 2, c: 3 }, { a: 1, b: 2, c: 3 })).toBe(true);

    var obj = {};
    (0, _expect2.default)(tripleEquals({ a: 1, b: 2, c: obj }, { a: 1, b: 2, c: obj })).toBe(true);

    (0, _expect2.default)(tripleEquals(null, null)).toBe(true);
  });

  it('should return false if arguments are number and string', function () {
    (0, _expect2.default)(tripleEquals(2, '2')).toBe(false);
  });

  it('should return false if arguments are string and number', function () {
    (0, _expect2.default)(tripleEquals('2', 2)).toBe(false);
  });

  it('should return false if arguments are number and object', function () {
    (0, _expect2.default)(tripleEquals(4, {})).toBe(false);
  });

  it('should return false if arguments are object and number', function () {
    (0, _expect2.default)(tripleEquals({}, 4)).toBe(false);
  });

  it('should return false if arguments are number and array', function () {
    (0, _expect2.default)(tripleEquals(4, [])).toBe(false);
  });

  it('should return false if arguments are array and number', function () {
    (0, _expect2.default)(tripleEquals([], 4)).toBe(false);
  });

  it('should return false if arguments are string and object', function () {
    (0, _expect2.default)(tripleEquals('cat', {})).toBe(false);
  });

  it('should return false if arguments are object and string', function () {
    (0, _expect2.default)(tripleEquals({}, 'cat')).toBe(false);
  });

  it('should return false if arguments are string and array', function () {
    (0, _expect2.default)(tripleEquals('cat', ['c', 'a', 't'])).toBe(false);
  });

  it('should return false if arguments are array and string', function () {
    (0, _expect2.default)(tripleEquals(['c', 'a', 't'], 'cat')).toBe(false);
  });

  it('should return false if arguments are array and object', function () {
    (0, _expect2.default)(tripleEquals([], {})).toBe(false);
  });

  it('should return false if arguments are object and array', function () {
    (0, _expect2.default)(tripleEquals({}, [])).toBe(false);
  });

  it('should return false if arguments are object and null', function () {
    (0, _expect2.default)(tripleEquals({ a: 1 }, null)).toBe(false);
  });

  it('should return false if arguments are null and object', function () {
    (0, _expect2.default)(tripleEquals(null, { a: 1 })).toBe(false);
  });

  it('should return false if first argument has too many keys', function () {
    (0, _expect2.default)(tripleEquals({ a: 1, b: 2, c: 3 }, { a: 1, b: 2 })).toBe(false);
  });

  it('should return false if second argument has too many keys', function () {
    (0, _expect2.default)(tripleEquals({ a: 1, b: 2 }, { a: 1, b: 2, c: 3 })).toBe(false);
  });

  it('should return false if arguments have different keys', function () {
    (0, _expect2.default)(tripleEquals({ a: 1, b: 2, c: undefined }, { a: 1, bb: 2, c: undefined })).toBe(false);
  });

  it('should return false if first array argument has too many items', function () {
    (0, _expect2.default)(tripleEquals([1, 2, 3, 4], [1, 2, 3])).toBe(false);
  });

  it('should return false if second array argument has too many items', function () {
    (0, _expect2.default)(tripleEquals([1, 2, 3], [1, 2, 3, 4])).toBe(false);
  });

  it('should work with objects inside arrays', function () {
    (0, _expect2.default)(tripleEquals([{ val: 4 }, { val: 2 }, { val: 3 }], [{ val: 1 }, { val: 2 }, { val: 3 }])).toBe(false);
  });
});